{"/home/travis/build/npmtest/node-npmtest-webcomponents/test.js":"/* istanbul instrument in package npmtest_webcomponents */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webcomponents/lib.npmtest_webcomponents.js":"/* istanbul instrument in package npmtest_webcomponents */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webcomponents = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webcomponents = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webcomponents/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webcomponents && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webcomponents */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webcomponents\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webcomponents.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webcomponents.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webcomponents.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webcomponents.__dirname + '/lib.npmtest_webcomponents.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/index.js":"var CustomElements = require('./customelements');\nvar Parser = require('./parser');\nvar Component = require('./component');\nvar fs = require('fs');\nvar glob = require('glob');\nvar EventEmitter = require('events').EventEmitter;\nvar inherits = require('util').inherits;\nvar Engine = require('./engine');\nvar Promise = require('es6-promise').Promise;\nvar vm = require('vm');\nvar _ = require('lodash');\n\nrequire('./resource');\n\nconst COMPONENT_TAG_NAME = 'web-component';\nconst NAME = 'name';\nconst EXTENDS = 'extends';\nconst OUTER = 'outer';\nconst ADAPTER = 'adapter';\nconst ATTRIBUTES = 'attributes';\nconst ATTRIBUTES_SEPARATOR = /\\s|,/;\n\nfunction WebComponents() {\n    EventEmitter.call(this);\n}\n\ninherits(WebComponents, EventEmitter);\n\nWebComponents.prototype.load = function (expr) {\n    // use sync\n    var files = glob.sync(expr);\n    files.forEach(function (file) {\n\n        var html = fs.readFileSync(file);\n        var $ = Parser.load(html, {decodeEntities: false});\n\n        $(COMPONENT_TAG_NAME).each(function () {\n\n            var $component = $(this);\n            var name = $component.attr(NAME);\n            var extend = $component.attr(EXTENDS);\n            var attributes = $component.attr(ATTRIBUTES);\n            var adapter = $component.attr(ADAPTER);\n            var outer = $component.attr(OUTER);\n\n            var publish = {};\n            if (attributes) {\n                // names='a b c' or names='a,b,c'\n                var names = attributes.split(ATTRIBUTES_SEPARATOR);\n                // record each name for publishing\n                for (var i = 0, l = names.length, n; i < l; i++) {\n                    // remove excess ws\n                    n = names[i].trim();\n                    // looks weird, but causes n to exist on `publish` if it does not;\n                    // a more careful test would need expensive `in` operator\n                    if (n && publish[n] === undefined) {\n                        publish[n] = undefined;\n                    }\n                }\n            }\n\n            if (!name) {\n                console.error('Component define in', file, 'missing required name attribute')\n            } else {\n\n                var $script = $component.find('script');\n                var type = $script.attr('type') || 'javascript';\n                var definition = {};\n                if ($script.length) {\n                    var script = vm.createScript($script.html(), file);\n                    script.runInNewContext({\n                        Component: function (def) {\n                            definition = def || {};\n                        }\n                    });\n                }\n\n                definition = _.merge({\n                    path: file,\n                    extends: extend,\n                    attributes: publish,\n                    adapter: adapter,\n                    outer: outer !== undefined,\n                    $component: $component,\n                    $: $\n                }, definition);\n\n                CustomElements.register(name, definition);\n            }\n        });\n\n    });\n};\n\nWebComponents.prototype.render = function (file, globalData) {\n    // TODO: pre render in production env\n    var html = fs.readFileSync(file);\n    var $ = Parser.load(html);\n\n    var customElementPromises = [];\n\n    CustomElements.getRegistered().forEach(function (customElement) {\n\n        function renderElement(index, elem) {\n            var $customElement = $(this);\n\n            var component = new Component(customElement);\n\n            CustomElements.getPublishedAttributes(customElement).forEach(function (attribute) {\n                var value = $customElement.attr(attribute);\n                if (value) component.setAttribute(attribute, value);\n            });\n\n            var renderPromise = component.render($customElement, globalData);\n            customElementPromises.push(renderPromise);\n        }\n\n        $(customElement).each(renderElement);\n        $('[is=' + customElement + ']').each(renderElement);\n    });\n\n    return Promise.all(customElementPromises).then(function () {\n        return $.html();\n    });\n\n};\n\nWebComponents.prototype.register = CustomElements.register;\n\nWebComponents.prototype.engine = Engine.register;\n\nmodule.exports = new WebComponents;\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/customelements/index.js":"var _ = require('lodash');\nvar inherits = require('util').inherits;\nvar Element = require('../element');\n\nvar reservedTagList = [\n    'annotation-xml', 'color-profile', 'font-face', 'font-face-src',\n    'font-face-uri', 'font-face-format', 'font-face-name', 'missing-glyph'\n];\n\nfunction isReservedTag(name) {\n    for (var i = 0; i < reservedTagList.length; i++) {\n        if (name === reservedTagList[i]) {\n            return true;\n        }\n    }\n}\n\n// element registry (maps tag names to definitions)\nvar registry = {};\n\nfunction getRegisteredDefinition(name) {\n    if (name) {\n        return registry[name.toLowerCase()];\n    }\n}\n\nvar CustomElements = {};\n\nfunction generateConstructor(definition) {\n    return function() {\n        var element = new Element(definition.__name);\n        element.__proto__ = definition.ctor.prototype;\n        return element;\n    }\n}\n\nCustomElements.register = function (name, options) {\n    // TODO: probably should clone options instead of mutating it\n    var definition = options || {};\n    if (!name) {\n        throw new Error('CustomElements.register: first argument `name` must not be empty');\n    }\n\n    if (name.indexOf('-') < 0) {\n        throw new Error('CustomElements.register: first argument (\\'name\\') must contain a dash (\\'-\\'). Argument provided was \\'' + String(name) + '\\'.');\n    }\n    // prevent registering reserved names\n    if (isReservedTag(name)) {\n        throw new Error('Failed to execute \\'register\\' on \\'CustomElements\\': Registration failed for type \\'' + String(name) + '\\'. The type name is invalid.');\n    }\n    // elements may only be registered once\n    if (getRegisteredDefinition(name)) {\n        throw new Error('DuplicateDefinitionError: a type with name \\'' + String(name) + '\\' is already registered');\n    }\n\n    // must have a prototype, default to an extension of HTMLElement\n    if (!definition.prototype) {\n        definition.prototype = Element.prototype;\n        // TODO: probably should throw if no prototype, check spec\n        // throw new Error('Options missing required prototype property');\n    }\n\n    // record name\n    definition.__name = name.toLowerCase();\n\n    // Run custom element constructor generation algorithm with PROTOTYPE\n    definition.ctor = generateConstructor(definition);\n\n    if(definition.extends){\n\n        var parentDefinition = getRegisteredDefinition(definition.extends);\n\n        if(!parentDefinition){\n            throw new Error('Failed to extends')\n        }else{\n            definition = _.merge({}, parentDefinition, definition);\n            definition.ctor.prototype = _.extend({}, parentDefinition.prototype, definition.prototype);\n        }\n\n    }else{\n        // TODO: when no prototype\n        definition.ctor.prototype = _.extend({}, Element.prototype, definition.prototype);\n    }\n\n    // force our .constructor to be our actual constructor\n    definition.prototype.constructor = definition.ctor;\n    // if initial parsing is complete\n    // upgrade any pre-existing nodes of this type\n\n    // Register the DEFINITION\n    registry[definition.__name] = definition;\n\n    return definition.ctor;\n};\n\nCustomElements.create = function (tag) {\n\n    var definition = getRegisteredDefinition(tag);\n    if (definition) {\n        var element = new definition.ctor();\n        if(definition.attributes){\n            element.attributes = _.clone(definition.attributes);\n        }\n        return element;\n    }\n};\n\nCustomElements.instanceof = function(obj, base) {\n    return obj instanceof base;\n};\n\nCustomElements.getRegistered = function(is){\n    if(is){\n        return _.map(registry, function(definition, key){\n            if(definition.is == is){\n                return definition.__name\n            }\n        }).filter(function(name){\n            return name;\n        });\n    }else{\n        return Object.keys(registry)\n    }\n};\n\nCustomElements.getRegisteredDefinition = getRegisteredDefinition;\n\nCustomElements.getPublishedAttributes = function (name) {\n    var definition = getRegisteredDefinition(name);\n    if (definition && definition.attributes) {\n        return Object.keys(definition.attributes)\n    } else {\n        return []\n    }\n};\n\nCustomElements.registry = registry;\n\nmodule.exports = CustomElements;\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/element/index.js":"function Element(name){\n    this.name = name;\n    this.attributes = {};\n\n    // invoke createdCallback\n    if (this.createdCallback) {\n        this.createdCallback();\n    }\n}\n\nElement.prototype = {\n    setAttribute: function(name, value){\n        var oldValue = this.getAttribute(name);\n        this.attributes[name] = value;\n        this._changeAttribute(name, oldValue, value);\n    },\n    removeAttribute: function(name) {\n        if(this.hasAttribute(name)){\n            var oldValue = this.getAttribute(name);\n            this.attributes[name] = null;\n            delete this.attributes[name];\n            this._changeAttribute(name, oldValue, null);\n        }\n    },\n    hasAttribute: function(name) {\n        return this.attributes[name] != null\n    },\n    getAttribute: function(name) {\n        return this.attributes[name]\n    },\n    // https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/\n    // index.html#dfn-attribute-changed-callback\n    _changeAttribute: function (attrName, oldValue, newValue) {\n        if (this.attributeChangedCallback\n            && (newValue !== oldValue)) {\n            this.attributeChangedCallback(attrName, oldValue, newValue);\n\n        }\n    }\n    // Called when a custom element is created\n    // createdCallback: function(){},\n\n    // Called when an attribute on a custom element changes\n    // attributeChangedCallback: function(attrName, oldValue, newValue){}\n}\n\nmodule.exports = Element;\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/parser/index.js":"module.exports = require('cheerio');\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/component/index.js":"var CustomElements = require('../customelements');\nvar Element = require('../element');\nvar Style = require('../style');\nvar Engine = require('../engine');\nvar _ = require('lodash');\nvar Promise = require('es6-promise').Promise;\nvar inherits = require('util').inherits;\n\nconst RESOURCE_TYPE = 'web-resource';\nconst SHIM_TAG_NAME = 'div';\n\nfunction Component(name) {\n    Element.call(this, name);\n\n    var definition = CustomElements.getRegisteredDefinition(name);\n\n    this.path = definition.path;\n    this.adapter = definition.adapter;\n    this.attributes = definition.attributes;\n    this.outer = definition.outer;\n    this.$ = definition.$;\n    this.$component = definition.$component;\n}\n\ninherits(Component, Element);\n\nComponent.prototype.fetchResources = function ($component) {\n    var self = this;\n    var $ = this.$;\n    var requestPromises = [];\n\n    CustomElements.getRegistered(RESOURCE_TYPE).forEach(function (customElement) {\n        var $resources = $component.find(customElement);\n\n        $resources.each(function () {\n\n            var $resource = $(this);\n            var tagName = this.name;\n            var resourceElement = CustomElements.create(tagName);\n\n            CustomElements.getPublishedAttributes(tagName).forEach(function (attribute) {\n                var value = $resource.attr(attribute);\n                if (value) resourceElement.setAttribute(attribute, value);\n            });\n            // Before request handler\n            resourceElement.beforeRequest && resourceElement.beforeRequest(self.attributes);\n\n            var promise = new Promise(function (resolve, reject) {\n                resourceElement.request(resolve, reject);\n            });\n\n            requestPromises.push(promise);\n        });\n\n        // remove it\n        $resources.remove();\n    });\n\n    return Promise.all(requestPromises)\n};\n\nComponent.prototype.render = function ($customElement, globalData) {\n    var self = this;\n    self.$customElement = $customElement;\n    var $component = self.$component;\n\n    // process template\n    var promise = self.fetchResources($component)\n        .then(function (componentData) {\n            // componentData is array\n            var rendered = '';\n            var template = self.fetchTemplate($component);\n            if (template) {\n                rendered = self.renderTemplate(template, componentData, globalData, self.path);\n            }\n            return rendered;\n\n        })\n        .then(function (rendered) {\n            // process style\n            var style = self.fetchStyle($component);\n            var styleHtml = self.renderStyle(style);\n            return styleHtml + rendered;\n        })\n        .then(function (rendered) {\n            self.renderElement(rendered);\n\n            // Must render current component first that may pass dynamic params to sub component attributes.\n            // TODO: how to optimize in production env when sub component is rendered by dynamic dependent\n            self.renderTree($customElement, globalData);\n        });\n\n    return promise;\n};\n\nComponent.prototype.renderElement = function (rendered) {\n    var self = this;\n    var $customElement = self.$customElement;\n\n    if (self.outer) {\n        $customElement.replaceWith(rendered);\n    } else {\n        // Convert custom tag to shim tag with component class\n        if($customElement[0].name == self.name){\n            $customElement[0].name = SHIM_TAG_NAME;\n            $customElement.addClass(self.name);\n        }\n\n        $customElement.html(rendered);\n    }\n};\n\nComponent.prototype.renderTree = function ($fragment, globalData) {\n    var self = this;\n    var $ = self.$;\n\n    var customElementPromises = [];\n\n    CustomElements.getRegistered().forEach(function (customElement) {\n\n        function renderElement(index, elem) {\n            var $customElement = $(this);\n            var component = new Component(customElement);\n\n            CustomElements.getPublishedAttributes(customElement).forEach(function (attribute) {\n                var value = $customElement.attr(attribute);\n                if (value) component.setAttribute(attribute, value);\n            });\n\n            var renderPromise = component.render($customElement, globalData);\n            // render all multi-level nested component\n            var renderTreePromise = self.renderTree($customElement, globalData);\n\n            customElementPromises.push(renderPromise, renderTreePromise);\n        }\n\n        $fragment.find(customElement).each(renderElement);\n        $fragment.find('[is=' + customElement + ']').each(renderElement);\n    });\n\n    return Promise.all(customElementPromises);\n};\n\nComponent.prototype.fetchStyle = function ($component) {\n    var $style = $component.find('style');\n    var type = $style.attr('type') || 'style';\n    if ($style.length) {\n        return {\n            content: Style.shimShadowStyles($style.html(), this.name),\n            type: type\n        };\n    }\n    // TODO: support external link\n    // var $link = $component.find('link[ref=stylesheet]');\n};\n\n// TODO: output all in one style file\nComponent.prototype.renderStyle = function (style) {\n    if (!style) {\n        return '';\n    }\n\n    var self = this;\n    var content = style.content;\n    var type = style.type;\n\n    return ['<style>', content, '</style>'].join('');\n};\n\nComponent.prototype.fetchContent = function ($template) {\n\n    var self = this;\n    var $ = self.$;\n    var $customElement = self.$customElement;\n    // render composed DOM\n    $template.find('content').each(function () {\n        var $content = $(this);\n        var select = $content.attr('select');\n\n        var $matched;\n        if (select) {\n            $matched = $customElement.find(select);\n        } else {\n            $matched = $customElement.children()\n        }\n        $content.replaceWith($matched);\n    });\n};\n\nComponent.prototype.fetchTemplate = function ($component) {\n    var $template = $component.find('template');\n\n    if ($template.length) {\n\n        var type = $template.attr('type') || 'template';\n        this.fetchContent($template);\n        return {\n            content: $template.html(),\n            type: type\n        };\n    }\n\n};\n\nComponent.prototype.renderTemplate = function (template, componentData, globalData, relativePath) {\n    var self = this;\n    var content = template.content;\n    var type = template.type;\n    var engine = Engine.get(type);\n\n    var combinedData = componentData;\n\n    if (_.isArray(componentData)) {\n        // TODO: the performance of 'call' is better then 'apply'\n        combinedData = _.extend.apply(null, _.clone(componentData));\n    }\n\n    var data = _.extend({}, globalData, self.attributes, combinedData);\n    if (_.isFunction(self.adapter)) {\n        var fn = self.adapter;\n        var context = {\n            request: globalData.request,\n            req: globalData.request,\n            response: globalData.response,\n            res: globalData.response,\n            global: globalData,\n            attributes: self.attributes,\n            // resource data\n            data: componentData\n        };\n        // TODO: clone data if pass data may be rewrite, but it performance mate\n        data = fn.call(context, data);\n    }\n\n    if (engine.compile && engine.render) {\n        var compiled = engine.compile(content, relativePath);\n        return engine.render(compiled, data);\n    } else if (_.isFunction(engine)) {\n        return engine(content, data, relativePath);\n    } else {\n        console.error('Engine', type, 'unregistered');\n    }\n\n};\n\nmodule.exports = Component;\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/style/index.js":"function buildShadowRegexes(elementName) {\n    var elementClassName = '.' + elementName;\n    return [\n        [/^:host\\(([^:]+)\\)$/, elementClassName+'$1'],\n        [/^:host(:hover|:active|:focus)$/, elementClassName+'$1'],\n        [/^:host(\\[[^:]+\\])$/, elementClassName+'$1'],\n        [/^:host$/, elementClassName],\n        [/^:ancestor\\(([^:]+)\\)$/, '$1 '+elementClassName], // deprecated; replaced by :host-context\n        [/^:host-context\\(([^:]+)\\)$/, '$1 '+elementClassName],\n        [/^::content/, elementClassName],\n    ];\n}\n\nfunction shimSelector(selector, elementName, selectorRegexes) {\n    var shimed = false;\n\n    for (var i = 0; i < selectorRegexes.length; i++) {\n        var re = selectorRegexes[i];\n        if (selector.match(re[0])) {\n            shimed = true;\n            selector = selector.replace(re[0], re[1]);\n            break;\n        }\n    }\n    if (!shimed && !selector.match(new RegExp(elementName))) {\n        selector = '.' + elementName + ' ' + selector;\n    }\n    return selector;\n}\n\nfunction shimShadowSelector(selector, elementName) {\n    return shimSelector(selector, elementName, buildShadowRegexes(elementName));\n}\n\nfunction shimStyles(styles, elementName, regexes) {\n    var css = require('css'),\n        parseTree = css.parse(styles);\n\n    parseTree.stylesheet.rules.forEach(function(rule) {\n        rule.selectors.forEach(function(selector, i, selectorsRef) {\n            selectorsRef[i] = shimSelector(selector, elementName, regexes);\n        });\n    });\n\n    return css.stringify(parseTree);\n}\n\nfunction shimShadowStyles(styles, elementName) {\n    return shimStyles(styles, elementName, buildShadowRegexes(elementName));\n}\n\nmodule.exports = {\n    shimShadowSelector: shimShadowSelector,\n    shimShadowStyles: shimShadowStyles\n};\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/engine/index.js":"var _ = require('lodash');\nvar Handlebars = require('handlebars');\n\nvar Engine = {};\n\nEngine.engines = {};\n\n/**\n *\n * @param type\n * @param fn(template, data, relativePath)\n *\n *   relativePath - path with which to resolve relative rules\n */\nEngine.register = function(type, fn){\n\n    if (_.isString(type)) {\n        Engine.engines[type] = fn;\n    }else if(_.isPlainObject(type)){\n        _.extend(Engine.engines, type);\n    }else{\n        throw new Error('Engine.register: first argument must be string or object. Argument provided was \\'' + String(type) + '\\'.');\n    }\n\n};\n\nEngine.get = function(type){\n    return Engine.engines[type];\n};\n\nEngine.register('template', {\n    compile: function(source, relativePath){\n        return Handlebars.compile(source);\n    },\n    render: function(compiled, context){\n        return compiled(context);\n    }\n});\n\nmodule.exports = Engine;\n","/home/travis/build/npmtest/node-npmtest-webcomponents/node_modules/webcomponents/lib/resource/index.js":"var CustomElements = require('../customelements');\nvar http = require('http');\nvar url = require('url');\n\nvar JSON_TYPE = 'json';\n\nCustomElements.register('web-resource', {\n    outer: true,\n    is: 'web-resource',\n    attributes: {\n        url: '',\n        method: 'GET',\n        headers: {},\n        dataType: JSON_TYPE\n    },\n    prototype: {\n        beforeRequest: function(data){\n            var url = this.getAttribute('url');\n            url = url.replace(/\\$\\{(.+?)\\}/g, function($0, $1) {\n                return $1 in data ? data[$1] : $0;\n            });\n            this.setAttribute('url', url);\n        },\n        request: function(resolve, reject){\n            var options = url.parse(this.getAttribute('url'));\n            options.method = this.getAttribute('method');\n            options.headers = this.getAttribute('headers');\n            var dataType = this.getAttribute('dataType');\n\n            http.request(options, function(response) {\n                var str = '';\n\n                response.on('data', function (chunk) {\n                    str += chunk;\n                });\n\n                response.on('end', function () {\n                    var res;\n\n                    if(dataType.toLowerCase() == JSON_TYPE){\n                        res = JSON.parse(str)\n                    }else{\n                        res = str;\n                    }\n\n                    resolve(res);\n                });\n\n            }).end();\n\n        }\n    }\n});\n\n"}